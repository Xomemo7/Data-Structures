public class Node<T> where T:IComparable<T>
{
    public T Key { get; private set; }
    public Node<T> Left { get; set; }
    public Node<T> Right { get; set; }
    public Node(T key, Node<T> left = null, Node<T> right = null)
    {
        this.Key = key;
        this.Left = left;
        this.Right = right;

    }

}
public class BinaryTree<T> where T : IComparable<T>
{
    public Node<T> Root { get; protected set; }
    public int Size { get; protected set; }


    public BinaryTree(T rootKey)
    {

        Root = new Node<T>(rootKey);
        Size++;
    }
    public BinaryTree(List<T> nodes)
    {
        Root = new Node<T>(nodes[0]);
        Size++;
        for (int i = 1; i < nodes.Count; i++)
        {
            this.Insert(nodes[i]);
        }

    }
    
    public void PrintTree()
    {
        PrintTree(Root, 0);
    }


    private void PrintTree(Node<T> root, int space)
    {
        int COUNT = 10;  // Distance between levels
        if (root == null)
            return;

        space += COUNT;
        PrintTree(root.Right, space);

        Console.WriteLine();
        for (int i = COUNT; i < space; i++)
            Console.Write(" ");
        Console.WriteLine(root.Key);
        PrintTree(root.Left, space);
    }
    public void LevelOrder()
    {
        if (Root == null)
            return;



        Queue<Node<T>> queue = new Queue<Node<T>>();
        queue.Enqueue(Root);


        while (queue.Count > 0)
        {
            int levelSize = queue.Count;

            // Print all nodes at the current level
            for (int i = 0; i < levelSize; i++)
            {
                Node<T> node = queue.Dequeue();
                Console.Write(node.Key + " ");

                // Enqueue the left and right children
                if (node.Left != null)
                {
                    queue.Enqueue(node.Left);
                }
                if (node.Right != null)
                {
                    queue.Enqueue(node.Right);
                }


            }
            Console.WriteLine();
        }

    }


    public virtual void Insert(T nodeKey)
    {

        Node<T> node = new Node<T>(nodeKey);
        Size++;
        if (Root == null)
        {
            Root = node;
            return;
        }

        Queue<Node<T>> queue = new Queue<Node<T>>();
        queue.Enqueue(Root);
        while (queue.Count > 0)
        {
            Node<T> current = queue.Dequeue();
            if (current.Left == null)
            {
                current.Left = node;
                return;
            }
            else
            {
                queue.Enqueue(current.Left);
            }
            if (current.Right == null)
            {
                current.Right = node;
                return;
            }
            else
            {
                queue.Enqueue(current.Right);
            }

        }




    }

    private void PreOrder(Node<T> root)
    {
        if (root == null)
            return;
        Console.Write(root.Key + " ");
        PreOrder(root.Left);
        PreOrder(root.Right);
    }
    public void PreOrder()
    {
        PreOrder(Root);
    }

    private void InOrder(Node<T> root)
    {
        if (root == null)
            return;

        InOrder(root.Left);
        Console.Write(root.Key + " ");
        InOrder(root.Right);
    }
    public void InOrder()
    {
        InOrder(Root);
    }
    private void PostOrder(Node<T> root)
    {
        if (root == null)
            return;
        PostOrder(root.Left);
        PostOrder(root.Right);
        Console.Write(root.Key + " ");
    }
    public void PostOrder()
    {
        PostOrder(Root);
    }

}
public class BinarySearchTree<T> :BinaryTree<T> where T:IComparable<T>
{
    

    public BinarySearchTree(T rootKey): base(rootKey) { }
    public BinarySearchTree(List<T> nodes) : base(nodes) { }



    public int Height()
    {
        int height = -1;
        if (Root == null)//empty
            return height;

        
        Queue<Node<T>> queue = new Queue<Node<T>>();//breadth first
        queue.Enqueue(Root);
        while (queue.Count > 0)
        {
            int levelSize = queue.Count;
            height++;
            
            for (int i = 0; i < levelSize; i++)
            {
                Node<T> node = queue.Dequeue();

                if (node.Left != null)
                {
                    queue.Enqueue(node.Left);
                }
                if (node.Right != null)
                {
                    queue.Enqueue(node.Right);
                }

            }
        }
        return height;
    }
    public override void Insert(T key)
    {
        Insert(Root, key);
            
    }

    private Node<T> Insert(Node<T> node, T key)
    {
        if (node == null)
        {
            Size++;
            return new Node<T>(key);
        }
        else if (key.CompareTo(node.Key) < 0)
        {
            node.Left = Insert(node.Left, key);
        }
        else if (key.CompareTo(node.Key) > 0)
        {
            node.Right = Insert(node.Right, key);
        }

        return node;
    }

    private Node<T>Find(T key,Node<T>root)
    {
        if(root == null)
            return null;
        if (key.CompareTo(root.Key) > 0)
            return Find(key, root.Right);
        if (key.CompareTo(root.Key) < 0)
            return Find(key, root.Left);
        return root;

    }

    public Node<T>Find(T key)
    {
        return Find(key,Root);
    }   
    public bool Exists(T key)
    {
        return Find(key) != null;
    }
}
